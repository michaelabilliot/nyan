### **1. UI/UX Enhancements**

These changes will improve the layout and user experience of the right-side panel.

*   **Add a Visual Divider:**
    *   **Goal:** To visually separate the Rebirth/Control section from the main list of upgrades.
    *   **Instruction:** In the `style.css` file, target the `#upgrades-list` element. Add a `border-top` property (e.g., `2px solid var(--border-color)`) and some `padding-top` or `margin-top` to create clear visual separation.

*   **Create a Sticky Header:**
    *   **Goal:** The "Shop," "Rebirth," and "Buy" buttons, along with the rebirth info, should remain visible at the top of the panel when the user scrolls through the upgrades.
    *   **Instruction:** The structure in `index.html` needs a slight change. Group the `#controls-header`, `#rebirth-info-container`, and `#rebirth-progress-bar-container` into a single parent `div`. Then, in `style.css`, modify the `#right-panel` to be a flex container with `flex-direction: column`. The new header `div` will remain fixed at the top, while the `#upgrades-list` element should be set to `overflow-y: auto`, which will make it the only scrollable part of the panel.

### **2. Bug Fixes & Refinements**

*   **Rainbow Particle Positioning:**
    *   **Problem:** The rainbow trail particles sometimes spawn in the wrong location, likely due to an incorrect position calculation.
    *   **Instruction:** In the `animate` function within `main.js`, the particle's position calculation needs to be adjusted. It currently uses coordinates relative to the entire viewport. It should instead calculate its position relative to its parent, the `#main-area` container. The calculation must account for the container's own position on the page to ensure the particles always originate correctly from behind the Nyan Cat, regardless of window size or layout shifts. The hardcoded offset (`- 100px`) should be removed and replaced with a dynamic calculation based on the cat's image width.

*   **Remove Hardcoded Planet Buttons:**
    *   **Problem:** The planet buttons in `index.html` are currently hardcoded, which is inflexible.
    *   **Instruction:** Remove the button elements from the `#planet-selector` div in `index.html`. The `renderPlanets` function in `ui.js` already generates these dynamically, so the hardcoded HTML is redundant and should be removed. The planet system itself will be moved to the Nyan Tree (see below).

### **3. Core Gameplay Overhaul: The "Nyan Tree" Prestige System**

This will replace the current planet unlock system and add a deeper layer to the game, inspired by the prestige mechanics in games like *Cookie Clicker*.

*   **A. Update the Rebirth Mechanic:**
    *   **Goal:** Rebirthing should now be the source of a new currency for the prestige system.
    *   **Instructions:**
        1.  **Introduce "Tech Points":** Create a new currency called "Tech Points." Add `techPoints: 0` to the `gameState`.
        2.  **Modify Rebirth Logic:** In the `handleRebirth` function in `main.js`, when a player rebirths, they should be awarded Tech Points. The amount should be based on the magnitude of their Nyan Coins at the time of rebirth. A good formula is `Math.floor(Math.log10(gameState.coins / REBIRTH_COST)) + 1`.
        3.  **Update Rebirth Info:** The text below the Rebirth button should now display the number of Tech Points the player has.

*   **B. Implement the "Nyan Tree" Button & Modal:**
    *   **Goal:** Create the entry point for the new prestige skill tree.
    *   **Instructions:**
        1.  **Add the Button:** In `index.html`, add a new button next to the "Rebirth" button. Give it the ID `nyan-tree-btn` and the text "Nyan Tree."
        2.  **Style the Button:** In `style.css`, style this new button to match the others. It should be disabled (e.g., grayed out, lower opacity) until the player has at least one Tech Point.
        3.  **Create the Modal:** In `index.html`, create a new modal `div`, similar to the shop modal. Give it an ID like `nyan-tree-modal`. This modal will contain the tech tree interface. The "Nyan Tree" button should open this modal.

*   **C. Design the Nyan Tree System:**
    *   **Goal:** A new screen where players spend Tech Points on powerful, permanent upgrades.
    *   **Instructions:**
        1.  **Create New Data:** In `data.js`, create a new exported constant, `NYAN_TREE_UPGRADES`, which will be an array of objects. Each object represents a purchasable node on the tree.
        2.  **Node Properties:** Each upgrade object should have an `id`, `name`, `description`, `cost` (in Tech Points), `maxLevel` (if applicable), and an array of `dependencies` (IDs of other nodes that must be purchased first) to create branching paths.
        3.  **Render the Tree:** Create a `renderNyanTree` function in `ui.js`. This function will dynamically create and display the upgrade nodes in the `nyan-tree-modal` based on the `NYAN_TREE_UPGRADES` data and the player's `gameState`. It should visually indicate which upgrades are purchased, which are affordable, and which are locked.

*   **D. Initial Nyan Tree Upgrades (Sample Layout):**
    *   **Goal:** Provide a starting set of upgrades for the tree.
    *   **Instructions:** Populate the `NYAN_TREE_UPGRADES` data with a few starting branches.
        *   **Main Branch (Core Boosts):**
            *   **Cosmic Clicks:** Permanently increases base click power by 2% per level.
            *   **Eternal Engine:** Permanently increases base CPS by 1% per level.
            *   **Efficient Engineering:** All upgrades are 1% cheaper per level.
        *   **Exploration Branch (Unlocks Planets):**
            *   **Unlock Mars Exploration:** Costs 2 Tech Points. Unlocks Mars and its associated upgrades in the main shop.
            *   **Unlock Nyan Planet Voyage:** Costs 10 Tech Points. Requires Mars unlock. Unlocks the Nyan Planet.
        *   **Special Branch (Unique Abilities):**
            *   **Golden Touch:** Makes the Golden Nyan skin a prestige unlock instead of a coin purchase.
            *   **Rebirth Multiplier Boost:** Increase the bonus from the main Rebirth button from +10% to +12%.

### **4. Codebase Audit and Refactoring Recommendations**

Based on a review of the provided files, here are areas for improvement to make the code more robust and maintainable.

1.  **State Management:** The current `T` function directly mutates a global `gameState` object. This works but can be error-prone. A more robust solution would be to encapsulate the state and have a dedicated function that returns a new state object instead of mutating the existing one, which helps prevent unintended side effects.
2.  **Data Consistency:** Ensure that all `id` fields across `UPGRADES_DATA`, `SKINS_DATA`, etc., are unique to prevent conflicts. The previous issue with `universe` vs. `nyan` highlights the importance of keeping data keys consistent.
3.  **Dynamic Content Rendering:** The game relies heavily on functions like `renderUpgrades` being called after every state change. This is inefficient. The logic could be improved to only update the specific elements that have changed, rather than re-rendering the entire list.
4.  **CSS Structure:** The `style.css` file is functional but could be better organized. Grouping related styles (e.g., all modal styles, all button styles) and adding comments would improve readability.
5.  **Function Dependencies:** In `main.js`, the `changePlanet` function takes `renderPlanets` and `renderUpgrades` as arguments. This creates a tight coupling. Since these functions are available in the same module scope, they can be called directly from within `changePlanet` without needing to be passed as parameters.